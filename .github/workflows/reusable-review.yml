# reusable-review.yml (requirements.txt 포함 체크아웃)

name: Reusable Code Review
on:
  workflow_call:
    inputs:
      repository:
        description: 'Target repository'
        required: true
        type: string
      pr-number:
        description: 'Pull request number'
        required: true
        type: number
      base-sha:
        description: 'Base SHA'
        required: true
        type: string
      head-sha:
        description: 'Head SHA'
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true  # 이것만 필수
      # 나머지는 선택사항 (기본값 사용)
      LLM_API_URL:
        required: false
      LLM_SERVER_HOST:
        required: false
      LLM_SERVER_PORT:
        required: false
      LLM_SERVER_USER:
        required: false

jobs:
  code-review:
    runs-on: ubuntu-latest
    environment: LLM_SERVER_HOST  # Environment 설정 추가
    steps:
    - uses: actions/checkout@v3
      with:
        repository: LLM-CODEREVIEW/llm-practice
        path: ./code-review-bot

    - name: Set default values
      run: |
        echo "=== 기본값 설정 ==="
        echo "LLM_HOST=${{ secrets.LLM_SERVER_HOST || '203.253.25.170' }}" >> $GITHUB_ENV
        echo "LLM_PORT=${{ secrets.LLM_SERVER_PORT || '2222' }}" >> $GITHUB_ENV
        echo "LLM_USER=${{ secrets.LLM_SERVER_USER || 'ssu01' }}" >> $GITHUB_ENV
        echo "LLM_API=${{ secrets.LLM_API_URL || 'http://localhost:11434' }}" >> $GITHUB_ENV
        echo "사용할 서버: $LLM_USER@$LLM_HOST:$LLM_PORT"

    - name: Debug - Print inputs
      run: |
        echo "=== 디버깅 정보 ==="
        echo "Repository: ${{ inputs.repository }}"
        echo "PR Number: ${{ inputs.pr-number }}"
        echo "Base SHA: ${{ inputs.base-sha }}"
        echo "Head SHA: ${{ inputs.head-sha }}"
        echo "사용할 서버: $LLM_USER@$LLM_HOST:$LLM_PORT"
        echo "API URL: $LLM_API"

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p $LLM_PORT -H $LLM_HOST >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Test SSH Connection
      run: |
        echo "=== SSH 연결 테스트 ==="
        ssh -o ConnectTimeout=15 \
          -p $LLM_PORT \
          $LLM_USER@$LLM_HOST \
          "echo 'SSH 연결 성공: $(date)'" || {
          echo "❌ SSH 연결 실패"
          exit 1
        }

    - name: Check Remote Ollama Status
      run: |
        echo "=== 원격 서버 Ollama 상태 확인 ==="
        ssh -p $LLM_PORT \
          $LLM_USER@$LLM_HOST \
          "curl -s http://localhost:11434/api/tags | head -20" || {
          echo "❌ 원격 서버에서 Ollama 접근 실패"
          exit 1
        }

    - name: Create SSH Tunnel
      run: |
        echo "=== SSH 터널 생성 ==="
        
        ssh -f -N -L 11434:localhost:11434 \
          -o ServerAliveInterval=60 \
          -o ServerAliveCountMax=3 \
          -p $LLM_PORT \
          $LLM_USER@$LLM_HOST
        
        # 터널 연결 대기
        for i in {1..30}; do
          if nc -z localhost 11434 2>/dev/null; then
            echo "✅ SSH 터널 연결 성공 (${i}초 후)"
            break
          fi
          sleep 1
          if [ $i -eq 30 ]; then
            echo "❌ SSH 터널 연결 타임아웃"
            exit 1
          fi
        done

    - name: Test Ollama Connection Through Tunnel
      run: |
        echo "=== 터널을 통한 Ollama 연결 테스트 ==="
        if curl -s --max-time 10 http://localhost:11434/api/tags; then
          echo "✅ Ollama API 연결 성공"
        else
          echo "❌ Ollama API 연결 실패"
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd ./code-review-bot
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run code review
      env:
        GITHUB_TOKEN: ${{ github.token }}
        LLM_SERVER_HOST: ${{ env.LLM_HOST }}
        LLM_SERVER_PORT: ${{ env.LLM_PORT }}
        LLM_SERVER_USER: ${{ env.LLM_USER }}
        LLM_API_URL: ${{ env.LLM_API }}
        SSH_TUNNEL_ALREADY_SETUP: "true"
      run: |
        cd ./code-review-bot
        echo "=== 코드 리뷰 실행 ==="
        echo "API URL: $LLM_API_URL"
        
        python src/main.py \
          --repo ${{ inputs.repository }} \
          --pr-number ${{ inputs.pr-number }} \
          --base-sha ${{ inputs.base-sha }} \
          --head-sha ${{ inputs.head-sha }} \
          --api-url $LLM_API_URL

    - name: Cleanup SSH tunnel
      if: always()
      run: |
        echo "=== SSH 터널 정리 ==="
        pkill -f "ssh.*11434:localhost:11434" && echo "SSH 터널 프로세스 종료됨" || echo "종료할 SSH 터널 프로세스 없음"