
template = """
<review-task>
  <confidence-score-criteria>
    - ‚≠êÔ∏è: Code is unclear or incomplete. Low confidence in the review judgment  
    - ‚≠ê‚≠ê: Possible issues, but lacking clear evidence. Suggestions are speculative  
    - ‚≠ê‚≠ê‚≠ê: General-level suggestion with moderate confidence  
    - ‚≠ê‚≠ê‚≠ê‚≠ê: Clear problem identification with practical recommendation  
    - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê: Highly confident suggestion based on explicit and observable issue  
  </confidence-score-criteria>

  <review-difficulty-criteria>
    - ‚≠êÔ∏è: Very simple change. No code analysis needed  
    - ‚≠ê‚≠ê: Simple logic, but understanding the flow is required  
    - ‚≠ê‚≠ê‚≠ê: Requires analyzing function- or block-level logic  
    - ‚≠ê‚≠ê‚≠ê‚≠ê: Multiple conditions, exceptions, or structure must be understood  
    - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê: Complex state handling or multi-module dependency analysis required  
  </review-difficulty-criteria>

  <severity-criteria>
    - üî• High: May cause runtime error, security breach, or data corruption  
    - üî• Medium: Potential performance degradation or poor maintainability  
    - üî• Low: Styling issue, naming inconsistency, or non-critical suggestions  
  </severity-criteria>

  <instruction>
    Perform a step-by-step code review for the given PR Diff.

    Follow these steps:
    1. Read only the lines starting with '+' (ignore '-', ' ')
    2. Understand what the code is trying to do
    3. For each code block, think in the following order:
       - Check for runtime errors or missing logging
       - Consider performance optimization
       - Evaluate security risks
       - Verify code convention compliance
       Only write comments when you detect an issue in each step.
    4. Summarize your findings using the format in &lt;output-format&gt;.
  </instruction>

  <convention-guide>
  {{CONVENTION_GUIDE_PLACEHOLDER}}
  </convention-guide>

  <output-format>
    <![CDATA[
### ‚úÖ PR Summary in 3 Lines
- [Summary line 1]
- [Summary line 2]
- [Summary line 3]
### üéØ Review Difficulty: ‚≠ê‚≠ê‚≠ê (3/5)
### üîë Key Keyword: ÎÑ§Ïù¥Î∞ç, ÏÉÅÏàò, Ìè¨Îß∑ÌåÖ, Î°úÍ∑∏ Îì±
### üîç Detailed Review

#### 1. **Function name uses discouraged 'get' prefix**  
üìå Line 33 | üî• Severity: Medium | üîé Confidence: ‚≠ê‚≠ê‚≠ê‚≠ê (4/5)  
The `getSevenDays()` function name violates Swift naming conventions.

**üí° Suggestion:** Rename the function to improve clarity and follow naming standards.

```swift
func generateSevenDays() -> [ScheduleDate]
```

#### 2. **Mixing Calendar.current and .gregorian**

üìå Line 21 | üî• Severity: Medium | üîé Confidence: ‚≠ê‚≠ê (2/5)
Using both `Calendar.current` and `Calendar(identifier: .gregorian)` may introduce inconsistencies.

**üí° Suggestion:** Declare a single calendar instance and reuse it consistently.

```swift
let calendar = Calendar(identifier: .gregorian)
```

  ]]>
  </output-format>

  <diff>
   <![CDATA[
   {{PR_DIFF_PLACEHOLDER}}
   ]]> 
  </diff>
</review-task>
"""
